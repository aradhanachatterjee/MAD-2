---
title: "Modern Application Development II - Week 2"
format:
    revealjs:
        incremental: true
        slideNumber: true
        smaller: true
        center: true
        scrollable: true
---

# JavaScript Collections

## Basic Arrays

- Collection of objects of any type
  - Can even be a mix of types (numbers, strings, objects, functions, etc.)
- Element access
- Length property
- Holes
- Iteration

## Iteration

- Go over all elements in a collection
- Concepts:
  - **Iterable**: an object whose contents can be accessed sequentially
  - **Iterator**: pointer to the next element in the collection
- Iterable objects:
  - Arrays
  - Strings
  - Maps
  - Sets
  - Browser DOM - tree structure
- Objects: `Object.keys(obj)`, `Object.values(obj)`, `Object.entries(obj)` - helper functions

## Iterations and Transformations

- Functions that take functions as arguments/input
- `map`, `filter`, `find`
  - Apply a callback function over each element in the collection
- Elements of functional programming: create a transformation chain

. . .

**Callback**: important concept - a function that is passed as an argument to another function, to be called back for some purpose

## Other Collections

- Maps: proper dictionary-like objects
- WeakMaps
- Sets

## Destructuring

- Simple syntax to split an array into multiple variables
- Easier to pass and collect arguments etc.
- Also works with objects

## Generators

- Functions that `yield` values one at a time
- Computed iterables
- Dynamically generate iterators

# Modularity

## Modules

- Collect related functions, objects, values together
- "export" values for use by other scripts
- "import" values from other scripts, packages

## Ways of implementing

- script - directly include script inside browser
- CommonJS - introduced for server-side modules
  - synchronous load: server blocks till module is loaded
- AMD - asynchronous module definition
  - used for browser-side modules

. . .

ECMAScript 6 and above:

- ES6 modules
  - Both servers and browsers
  - Asynchronous loading

## npm

- Node Package Manager
- Node:
  - command line interface for JS
  - Mainly used for backend code, can also be used for testing
- npm can also be used to package modules for frontend
  - "Bundle" managers - webpack, rollup, etc.

## Objects

- Everything in JavaScript is an object
- Object literals
  - Assign values to named parameters in an object
- Object methods
  - Assign functions that can be called on the object
- Special variable `this` - refers to the object itself
- Function methods
  - `call()`, `apply()`, `bind()`
- `Object.keys()`, `values()`, `entries()`
  - use as dictionary
  - iterators

## Prototype based inheritance

- Objects can have a "prototype"
- Automatically inherit properties and methods of parent object
- Single inheritance track

## Class

- Better syntax - still prototype based inheritance
- constructor must explicitly call `super()`
- Multiple inheritance of Mixins

