[
  {
    "objectID": "pages/w2.html#basic-arrays",
    "href": "pages/w2.html#basic-arrays",
    "title": "Modern Application Development II - Week 2",
    "section": "Basic Arrays",
    "text": "Basic Arrays\n\nCollection of objects of any type\n\nCan even be a mix of types (numbers, strings, objects, functions, etc.)\n\nElement access\nLength property\nHoles\nIteration"
  },
  {
    "objectID": "pages/w2.html#iteration",
    "href": "pages/w2.html#iteration",
    "title": "Modern Application Development II - Week 2",
    "section": "Iteration",
    "text": "Iteration\n\nGo over all elements in a collection\nConcepts:\n\nIterable: an object whose contents can be accessed sequentially\nIterator: pointer to the next element in the collection\n\nIterable objects:\n\nArrays\nStrings\nMaps\nSets\nBrowser DOM - tree structure\n\nObjects: Object.keys(obj), Object.values(obj), Object.entries(obj) - helper functions"
  },
  {
    "objectID": "pages/w2.html#iterations-and-transformations",
    "href": "pages/w2.html#iterations-and-transformations",
    "title": "Modern Application Development II - Week 2",
    "section": "Iterations and Transformations",
    "text": "Iterations and Transformations\n\nFunctions that take functions as arguments/input\nmap, filter, find\n\nApply a callback function over each element in the collection\n\nElements of functional programming: create a transformation chain\n\nCallback: important concept - a function that is passed as an argument to another function, to be called back for some purpose"
  },
  {
    "objectID": "pages/w2.html#other-collections",
    "href": "pages/w2.html#other-collections",
    "title": "Modern Application Development II - Week 2",
    "section": "Other Collections",
    "text": "Other Collections\n\nMaps: proper dictionary-like objects\nWeakMaps\nSets"
  },
  {
    "objectID": "pages/w2.html#destructuring",
    "href": "pages/w2.html#destructuring",
    "title": "Modern Application Development II - Week 2",
    "section": "Destructuring",
    "text": "Destructuring\n\nSimple syntax to split an array into multiple variables\nEasier to pass and collect arguments etc.\nAlso works with objects"
  },
  {
    "objectID": "pages/w2.html#generators",
    "href": "pages/w2.html#generators",
    "title": "Modern Application Development II - Week 2",
    "section": "Generators",
    "text": "Generators\n\nFunctions that yield values one at a time\nComputed iterables\nDynamically generate iterators"
  },
  {
    "objectID": "pages/w2.html#modules",
    "href": "pages/w2.html#modules",
    "title": "Modern Application Development II - Week 2",
    "section": "Modules",
    "text": "Modules\n\nCollect related functions, objects, values together\n“export” values for use by other scripts\n“import” values from other scripts, packages"
  },
  {
    "objectID": "pages/w2.html#ways-of-implementing",
    "href": "pages/w2.html#ways-of-implementing",
    "title": "Modern Application Development II - Week 2",
    "section": "Ways of implementing",
    "text": "Ways of implementing\n\nscript - directly include script inside browser\nCommonJS - introduced for server-side modules\n\nsynchronous load: server blocks till module is loaded\n\nAMD - asynchronous module definition\n\nused for browser-side modules\n\n\nECMAScript 6 and above:\n\nES6 modules\n\nBoth servers and browsers\nAsynchronous loading"
  },
  {
    "objectID": "pages/w2.html#npm",
    "href": "pages/w2.html#npm",
    "title": "Modern Application Development II - Week 2",
    "section": "npm",
    "text": "npm\n\nNode Package Manager\nNode:\n\ncommand line interface for JS\nMainly used for backend code, can also be used for testing\n\nnpm can also be used to package modules for frontend\n\n“Bundle” managers - webpack, rollup, etc."
  },
  {
    "objectID": "pages/w2.html#objects",
    "href": "pages/w2.html#objects",
    "title": "Modern Application Development II - Week 2",
    "section": "Objects",
    "text": "Objects\n\nEverything in JavaScript is an object\nObject literals\n\nAssign values to named parameters in an object\n\nObject methods\n\nAssign functions that can be called on the object\n\nSpecial variable this - refers to the object itself\nFunction methods\n\ncall(), apply(), bind()\n\nObject.keys(), values(), entries()\n\nuse as dictionary\niterators"
  },
  {
    "objectID": "pages/w2.html#prototype-based-inheritance",
    "href": "pages/w2.html#prototype-based-inheritance",
    "title": "Modern Application Development II - Week 2",
    "section": "Prototype based inheritance",
    "text": "Prototype based inheritance\n\nObjects can have a “prototype”\nAutomatically inherit properties and methods of parent object\nSingle inheritance track"
  },
  {
    "objectID": "pages/w2.html#class",
    "href": "pages/w2.html#class",
    "title": "Modern Application Development II - Week 2",
    "section": "Class",
    "text": "Class\n\nBetter syntax - still prototype based inheritance\nconstructor must explicitly call super()\nMultiple inheritance of Mixins"
  },
  {
    "objectID": "pages/w2.html#function-calls",
    "href": "pages/w2.html#function-calls",
    "title": "Modern Application Development II - Week 2",
    "section": "Function calls",
    "text": "Function calls\n\n\n\nFunction is like a “branch”\n\nbut must save present state so we can return\n\nCall stack:\n\nKeep track of chain of functions called up to now\nPop back up out of the stack\n\n\n\n\nmain() on stack - current - calls f()\nf() goes on stack - calls g()\ng() goes on stack - calls h()\nh() goes on stack - executes\nreturn from h -&gt; pop into g\nreturn from g -&gt; pop into f\nreturn from f -&gt; pop into main"
  },
  {
    "objectID": "pages/w2.html#call-stack",
    "href": "pages/w2.html#call-stack",
    "title": "Modern Application Development II - Week 2",
    "section": "Call Stack",
    "text": "Call Stack\nExplanatory video\nVisualize the call stack"
  },
  {
    "objectID": "pages/w2.html#event-loop-and-task-queue",
    "href": "pages/w2.html#event-loop-and-task-queue",
    "title": "Modern Application Development II - Week 2",
    "section": "Event Loop and Task Queue",
    "text": "Event Loop and Task Queue\n\nTask Queue: store next task to be executed\n\nTasks are pushed into the queue by events (clicks, input, network etc.)\n\nEvent loop:\n\nWait for call stack to be empty\nPop next task from queue and push onto stack, start executing\n\nRun-to-completion\n\nGuarantee from JavaScript runtime\nEach task will run to completion before next task is picked up"
  },
  {
    "objectID": "pages/w2.html#blocking-the-browser",
    "href": "pages/w2.html#blocking-the-browser",
    "title": "Modern Application Development II - Week 2",
    "section": "Blocking the browser",
    "text": "Blocking the browser\nhttps://exploringjs.com/impatient-js/ch_async-js.html#how-to-avoid-blocking-the-javascript-process"
  },
  {
    "objectID": "pages/w2.html#why-callbacks",
    "href": "pages/w2.html#why-callbacks",
    "title": "Modern Application Development II - Week 2",
    "section": "Why callbacks?",
    "text": "Why callbacks?\n\nLong running code\n\nWill block execution till it finishes\n\nPush long running code into a separate “thread” or “task”\n\nLet main code proceed\nCall back when task is done"
  },
  {
    "objectID": "pages/w2.html#example-reading-files---synchronous",
    "href": "pages/w2.html#example-reading-files---synchronous",
    "title": "Modern Application Development II - Week 2",
    "section": "Example: reading files - synchronous",
    "text": "Example: reading files - synchronous\nconst fs = require('fs');\n\ntry {\n    const data = fs.readFileSync('file.txt', 'utf8');\n    console.log(data);\n} catch (err) {\n    console.error(err);\n}"
  },
  {
    "objectID": "pages/w2.html#example-reading-files---asynchronous",
    "href": "pages/w2.html#example-reading-files---asynchronous",
    "title": "Modern Application Development II - Week 2",
    "section": "Example: reading files - asynchronous",
    "text": "Example: reading files - asynchronous\nconst fs = require('fs');\n\nfs.readFile('file.txt', 'utf8', (err, data) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(data);\n});"
  },
  {
    "objectID": "pages/w2.html#asynchronous-code",
    "href": "pages/w2.html#asynchronous-code",
    "title": "Modern Application Development II - Week 2",
    "section": "Asynchronous Code",
    "text": "Asynchronous Code\n\nVery powerful - allows JS to have high performance even though it is single-threaded\nCan be difficult to comprehend\n\nFocus on using async libraries and functions before writing your own\n\nPromises, async function calls, etc.\n\nImportant and useful concepts\nDeferred for now"
  },
  {
    "objectID": "pages/w2.html#json-1",
    "href": "pages/w2.html#json-1",
    "title": "Modern Application Development II - Week 2",
    "section": "JSON",
    "text": "JSON\n\nObject Notation - for serialization, communication\nNotation is frozen\n\nMeans even problem cases will remain (trailing “.” could ve useful but will not be used)\n\nUsage through JSON API"
  },
  {
    "objectID": "pages/w2.html#json-api",
    "href": "pages/w2.html#json-api",
    "title": "Modern Application Development II - Week 2",
    "section": "JSON API",
    "text": "JSON API\n\nGlobal namespace object JSON\nMain methods:\n\nJSON.stringify()\nJSON.parse()"
  },
  {
    "objectID": "pages/w1.html#review-of-mad-i",
    "href": "pages/w1.html#review-of-mad-i",
    "title": "Modern Application Development - II — Week 1",
    "section": "Review of MAD-I",
    "text": "Review of MAD-I\n\nWhat is an app (at least in our context):\n\nAn application or program used for interacting with a computing system\nAllow the user to perform some tasks useful to them\n\nComponents:\n\nBackend: Store data, processing logic, relation between data elements etc.\nFrontend: User-facing views, abstract for machine interaction\nNaturally implies a client-server or request-response type of architecture\n\nWhy Web:\n\nClose to universal platform with clear client-server architecture\nLow barrier to entry - trivial to implement simple pages and interaction\nHigh degree of flexibility - possible to implement highly complex systems"
  },
  {
    "objectID": "pages/w1.html#review-of-the-web-application-development-model",
    "href": "pages/w1.html#review-of-the-web-application-development-model",
    "title": "Modern Application Development - II — Week 1",
    "section": "Review of the Web Application Development Model",
    "text": "Review of the Web Application Development Model\n\nPresentation - HTML for semantic content, CSS for styling\nLogic - Backend logic highly flexible - we used Python with Flask\nApplication architecture:\n\nModel - View - Controller. Good compromise between understandability and flexibility\n\nSystem architecture:\n\nREST principles + sessions - how to build stateful applications over stateless protocols\nAPIs: separate data from view\nRESTful? APIs - useful for basic understanding, but not strict adherence to REST\n\nOthers:\n\nSecurity, Validation, Logins and RBAC, database and frontend choices etc."
  },
  {
    "objectID": "pages/w1.html#moving-forward",
    "href": "pages/w1.html#moving-forward",
    "title": "Modern Application Development - II — Week 1",
    "section": "Moving Forward",
    "text": "Moving Forward\n\nAdvanced Frontend Development\n\nExploring JavaScript and how to use it\nJavaScript, APIs, Markup - the JAMStack\nVueJS as a candidate frontend framework\n\nOther topics of interest\n\nAsynchronous messaging, Email\nMobile / Standalone apps, PWA/SPA\nPerformance measurement, benchmarking, optimization\nAlternatives to REST\netc."
  },
  {
    "objectID": "pages/w1.html#origins",
    "href": "pages/w1.html#origins",
    "title": "Modern Application Development - II — Week 1",
    "section": "Origins",
    "text": "Origins\n\nOriginally created in 1995 as scripting language for Netscape Navigator\nIntended as “glue” language\n\nStick modules from other languages together\nNot really meant for much code\n\nPrimarily meant to assist “applets” in Java - hence JavaScript\n\nTrademark issues, name changes, …\n\nIssues:\n\nSlow\nLimited capability"
  },
  {
    "objectID": "pages/w1.html#power",
    "href": "pages/w1.html#power",
    "title": "Modern Application Development - II — Week 1",
    "section": "Power",
    "text": "Power\n\nGlue was useful, but…\nThen Google Maps, Google Suggest etc. (~ 2005)\n\nPan around map, zoom in/out seamlessly - fluid user interface:\nLoad only what is needed!\n\nDescribed and Named Ajax - Garrett 2005\n\nAsynchronous Javascript and XML\n\nAllowed true “web applications” that behave like desktop applications\nEvolved considerably since then\n\nMuch more on this approach moving forward"
  },
  {
    "objectID": "pages/w1.html#standardization",
    "href": "pages/w1.html#standardization",
    "title": "Modern Application Development - II — Week 1",
    "section": "Standardization",
    "text": "Standardization\n\nMove beyond Netscape needed\nECMA (European Computer Manufacturers Association) - standard 262\nSubsequently called ECMAScript\n\nAvoid trademark issues with Java\n\nIn practice:\n\nLanguage standard called ECMAScript (versions)\nImplementation and use: JavaScript\n\nSignificant changes in ES6 - 2015\n\nYearly releases since then\n“Feature readiness” oriented approach"
  },
  {
    "objectID": "pages/w1.html#what-version-to-use",
    "href": "pages/w1.html#what-version-to-use",
    "title": "Modern Application Development - II — Week 1",
    "section": "What version to use?",
    "text": "What version to use?\n\nES6 has most features of modern languages (modules, scoping, class etc.)\nSome older browsers may not support all of this\nPossible approaches:\n\nIgnore old browsers and ask user to upgrade\nPackage browser along with application - useful for limited cases, like VSCode (Electron apps)\nPolyfills: include libraries that emulate newer functionality for older browsers\nCompilers: BabelJS - convert new code to older compatible versions\n\nBackend\n\nNode.js, Deno: directly use JS as a scripting language like Python"
  },
  {
    "objectID": "pages/w1.html#implications-of-js-origins",
    "href": "pages/w1.html#implications-of-js-origins",
    "title": "Modern Application Development - II — Week 1",
    "section": "Implications of JS Origins",
    "text": "Implications of JS Origins\n\nEase of use given priority over performance (to start with)\nHighly tolerant of errors - fail silently\n\nDebugging difficult!\nStrict mode: “use strict”;\n\nAmbiguous syntax variants\n\nAutomatic semicolon insertion\nObject literals vs Code blocks {}\nFunction: statement or expression? Impacts parsing\n\nLimited IO support: errors “logged” to “console”\nClosely integrates with presentation layer: DOM APIs\nAsynchronous processing and the Event Loop - very powerful!"
  },
  {
    "objectID": "pages/w1.html#using-js",
    "href": "pages/w1.html#using-js",
    "title": "Modern Application Development - II — Week 1",
    "section": "Using JS",
    "text": "Using JS\n\nNot originally meant for direct scripting\n\nUsually not run from command line like Python for instance\n\nNeed HTML file to load the JS as a script\n\nRequires browser to serve the files\nLinks and script tags etc.\nMay not directly work when loaded as a file\n\nNodeJS allows execution from command line"
  },
  {
    "objectID": "pages/w1.html#dom",
    "href": "pages/w1.html#dom",
    "title": "Modern Application Development - II — Week 1",
    "section": "DOM",
    "text": "DOM\n\nDocument Object Model\n\nStructure of the document shown on the browser\n\nDOM can be manipulated through JS APIs\nOne of the most powerful aspects of JavaScript\nInput: clicks, textboxes, mouseover, …\nOutput: text, colours/styles, drawing, …"
  },
  {
    "objectID": "pages/w1.html#references",
    "href": "pages/w1.html#references",
    "title": "Modern Application Development - II — Week 1",
    "section": "References",
    "text": "References\n\nExploring JavaScript - exploringjs.com\n\ndetailed reference material, focused on language, not frontend or GUI - very up to date\n\nMozilla Developer Network\n\nseveral examples and compatibility hints\n\nLearn JavaScript Online - interactive tutorial\n\nUtilities\n\nBabelJS - Compiler converts new JS to older compatible forms\nJS Console - interactive console to try out code\nRepl.it - complete application development"
  },
  {
    "objectID": "pages/w1.html#basic-frontend-usage",
    "href": "pages/w1.html#basic-frontend-usage",
    "title": "Modern Application Development - II — Week 1",
    "section": "Basic Frontend Usage",
    "text": "Basic Frontend Usage\n\nFrontend JavaScript: must be invoked from HTML page\n\nIn context of a “Document”\nwill not execute if loaded directly\n\nScripting language - no compilation step\nLoosely structured - no specific header, body etc."
  },
  {
    "objectID": "pages/w1.html#identifiers---the-words-of-the-language",
    "href": "pages/w1.html#identifiers---the-words-of-the-language",
    "title": "Modern Application Development - II — Week 1",
    "section": "Identifiers - the words of the language",
    "text": "Identifiers - the words of the language\nReserved words:\n`await` `break` `case` `catch` `class` `const` `continue` `debugger` `default` `delete` `do` `else` `export` `extends` `finally` `for` `function` `if` `import` `in` `instanceof` `let` `new` `return` `static` `super` `switch` `this` `throw` `try` `typeof` `var` `void` `while` `with` `yield`\nLiterals (values):\n`true` `false` `null`\nOthers to avoid\n`enum` `implements` `package` `protected` `interface` `private` `public` `Infinity` `NaN` `undefined` `async`"
  },
  {
    "objectID": "pages/w1.html#statements-and-expressions",
    "href": "pages/w1.html#statements-and-expressions",
    "title": "Modern Application Development - II — Week 1",
    "section": "Statements and Expressions",
    "text": "Statements and Expressions\n\n\n\nStatements:\n\nPiece of code that can be executed\n    if ( ... ) {\n        // do something\n    }\nStandalone operation or side effects\n\n\n\n\nExpressions:\n\nPiece of code that can be executed to obtain a value to be returned\n    x = 10;\n    \"Hello world\"\nAnywhere you need a “value” - function argument, math expression etc."
  },
  {
    "objectID": "pages/w1.html#data-types",
    "href": "pages/w1.html#data-types",
    "title": "Modern Application Development - II — Week 1",
    "section": "Data Types",
    "text": "Data Types\n\nPrimitive data types: built into the language\n\nundefined, null, boolean, number, string (+bigint, symbol)\n\nObjects:\n\nCompound pieces of data\n\nFunctions:\n\nCan be handled like objects\nObjects can have functions: methods\nFunctions can have objects???"
  },
  {
    "objectID": "pages/w1.html#strings",
    "href": "pages/w1.html#strings",
    "title": "Modern Application Development - II — Week 1",
    "section": "Strings",
    "text": "Strings\n\nSource code is expected to be in Unicode\n\nmost engines expect UTF-16 encoding\n\nString functions like length can give surprising results on non-ASCII words\nCan have variables in other languages!\n\nBut best avoided… keep readability in mind"
  },
  {
    "objectID": "pages/w1.html#non-values",
    "href": "pages/w1.html#non-values",
    "title": "Modern Application Development - II — Week 1",
    "section": "Non-Values",
    "text": "Non-Values\n\nundefined\n\nUsually implies not initialized\nDefault unknown state\n\nnull\n\nExplicitly set to a non-value\n\n\nVery similar and may be used interchangeably in most places - keep context in mind when using for clarity of code"
  },
  {
    "objectID": "pages/w1.html#operators-and-comparisons",
    "href": "pages/w1.html#operators-and-comparisons",
    "title": "Modern Application Development - II — Week 1",
    "section": "Operators and Comparisons",
    "text": "Operators and Comparisons\n\nAddition, subtraction etc.\n\nNumbers, Strings\n\nCoercion\n\nConvert to similar type where operation is defined\nCan lead to problems - needs care\n\nComparison:\n\nLoose equality: == tries to coerce\nStrict equality: === no coercion\n\nImportant for iteration, conditions"
  },
  {
    "objectID": "pages/w1.html#variables-and-scoping",
    "href": "pages/w1.html#variables-and-scoping",
    "title": "Modern Application Development - II — Week 1",
    "section": "Variables and Scoping",
    "text": "Variables and Scoping\n\nAny non-reserved identifier can be used as a “placeholder” or “variable”\nScope:\n\nShould the variable be visible everywhere in all scripts or only in a specific area?\nNamespaces and limiting scope\n\nlet, const are used for declaring variables\n\nUnlike Python, variables MUST be declared\nUnlike C, their type need NOT be declared\nvar was originally used for declaring variables, but has function level scope - avoid"
  },
  {
    "objectID": "pages/w1.html#let-and-const",
    "href": "pages/w1.html#let-and-const",
    "title": "Modern Application Development - II — Week 1",
    "section": "let and const",
    "text": "let and const\n\nconst : declares an immutable object\n\nValue cannot be changed once assigned\nBut only within scope\n\nlet: variable that can be updated\n\nindex variable in for loops\ngeneral variables"
  },
  {
    "objectID": "pages/w1.html#control-flow",
    "href": "pages/w1.html#control-flow",
    "title": "Modern Application Development - II — Week 1",
    "section": "Control Flow",
    "text": "Control Flow\n\nConditional execution:\n\nif , else\n\nIteration\n\nfor , while\n\nChange in flow\n\nbreak, continue\n\nChoice\n\nswitch"
  },
  {
    "objectID": "pages/w1.html#functions",
    "href": "pages/w1.html#functions",
    "title": "Modern Application Development - II — Week 1",
    "section": "Functions",
    "text": "Functions\n\nReusable block of code\nCan take parameters or arguments and perform computation\nFunctions are themselves objects that can be assigned!"
  },
  {
    "objectID": "pages/w1.html#function-notation",
    "href": "pages/w1.html#function-notation",
    "title": "Modern Application Development - II — Week 1",
    "section": "Function Notation",
    "text": "Function Notation\n\n\nRegular declaration\n    function add(x, y)\n    {\n    return x + y;\n    }\n    // Statement\n\nNamed variable\n    let add =\n    function(x, y) {\n    return x + y;\n    }\n    // Expression\n\nArrow function\n    let add =\n    (x, y) =&gt; x + y;\n\n    // Expression"
  },
  {
    "objectID": "pages/w1.html#anonymous-functions-and-iifes",
    "href": "pages/w1.html#anonymous-functions-and-iifes",
    "title": "Modern Application Development - II — Week 1",
    "section": "Anonymous Functions and IIFEs",
    "text": "Anonymous Functions and IIFEs\n    let x = function() { return \"hello\"} // Anonymous bound\n\n    (function() { return \"hello\"})() // Declare and invoke\nWhy? Older JS versions did not have good scoping rules. - Avoid IIFEs in modern code - poor readability"
  },
  {
    "objectID": "pages/w1.html#interaction",
    "href": "pages/w1.html#interaction",
    "title": "Modern Application Development - II — Week 1",
    "section": "Interaction",
    "text": "Interaction\n\nconsole.log is very limited\n\nvariants for error logging etc.\nBut mostly useful only for limited form of debugging - not production use\n\nBut JS was designed for document manipulation!\nInputs from DOM: mouse, text, clicks\nOutputs to DOM: manipulation of text, colours etc."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MAD-II",
    "section": "",
    "text": "This is a site to store MAD-II course materials."
  },
  {
    "objectID": "maybe/huh.html",
    "href": "maybe/huh.html",
    "title": "huh?",
    "section": "",
    "text": "huh?\nThe JavaScript code snippet you’ve provided demonstrates the use of the sort() method on an array. Let’s break down what’s happening:\n\nInitial Array:\nx = [1, 2, 2, 4, 5, -2, -7, -9];\nThis line initializes an array x with a mix of positive and negative integers.\nDefault Sorting:\nconsole.log(x.sort());\nWhen sort() is called without any arguments, it converts the elements into strings and compares their sequences of UTF-16 code units values. This is why the output might not be what you expect for numbers. In this case, the negative numbers are considered larger because their string representations (“-2”, “-7”, “-9”) come after the string representations of positive numbers in lexicographical order. Hence, the output appears as if the negative numbers are sorted at the beginning when in fact they’re being sorted based on their string values.\nExpected Output: [-2, -7, -9, 1, 2, 2, 4, 5]\nHowever, this output is incorrect based on the default behavior of sort() described. The correct output should be more like [\"-2\", \"-7\", \"-9\", \"1\", \"2\", \"2\", \"4\", \"5\"] if it were purely based on string comparison. The actual output without a compare function, treating elements as strings, would sort the numbers incorrectly as: [1, 2, 2, 4, 5, -2, -7, -9].\nSorting with a Compare Function:\nconsole.log(x.sort((a, b) =&gt; a - b));\nThis line sorts the array using a compare function. The compare function takes two arguments (a and b), which are elements of the array. If the function returns a value less than 0, a is sorted before b. If it returns 0, a and b are left unchanged with respect to each other, but sorted with respect to all different elements. If the function returns a value greater than 0, b is sorted before a.\nBy returning a - b, the function effectively sorts the numbers in ascending order, because:\n\nIf a is less than b, a negative value is returned, placing a before b.\nIf a is equal to b, 0 is returned, and their order remains unchanged.\nIf a is greater than b, a positive value is returned, placing b before a.\n\nCorrect Output: [-9, -7, -2, 1, 2, 2, 4, 5]\n\nThis demonstrates how the sort() method can be used both with and without a compare function to sort arrays in JavaScript. The compare function is crucial for sorting numbers in numerical order rather than lexicographical order."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "pages/w3.html#what-is-the-frontend",
    "href": "pages/w3.html#what-is-the-frontend",
    "title": "Modern Application Development II - Week 3",
    "section": "What is the frontend?",
    "text": "What is the frontend?\n\nUser-facing part of the application\n\nUser Interface (UI) and User Experience (UX)\n\nRequirements\n\nAvoid complex logic - application logic should be in the backend\nNo data storage\nWork with stateless nature of HTTP\n\nDesirable\n\nAesthetically pleasing\nResponsive - no lag/latency\nAdaptive - different screens"
  },
  {
    "objectID": "pages/w3.html#programming-styles",
    "href": "pages/w3.html#programming-styles",
    "title": "Modern Application Development II - Week 3",
    "section": "Programming Styles",
    "text": "Programming Styles\n\nImperative: sequence of actions to achieve final result\n\nDraw boxes for navigation, main text, fill in text, wait for clicks etc.\nFunctions for each step, composition of functions\n\nDeclarative: specify desired result\n\nCompiler/Interpreter knows how to achieve result\nFunction integration automated\n\n\n\n\n\n\nCredit: Flutter documentation “Start thinking declaratively”"
  },
  {
    "objectID": "pages/w3.html#state",
    "href": "pages/w3.html#state",
    "title": "Modern Application Development II - Week 3",
    "section": "State?",
    "text": "State?\n\nInternal details of system: memory\nReproducibility\n\nGiven a “system state”, the system should always respond the same way to input\n\nComplexity\n\nAny non-trivial application needs internal state"
  },
  {
    "objectID": "pages/w3.html#system-state",
    "href": "pages/w3.html#system-state",
    "title": "Modern Application Development II - Week 3",
    "section": "System State",
    "text": "System State\n\nComplete database of amazon.in, flipkart.com\n\nStocks of available items, prices, logged in/register users, etc.\n\nAll news articles ever published on toi.com, thehindu.com, bbc.com\nAll students, courses, marks, certificates, etc. for NPTEL\n\nTypically huge, but comprehensive\n\nCompletely independent of the user interface/frontend!"
  },
  {
    "objectID": "pages/w3.html#application-state",
    "href": "pages/w3.html#application-state",
    "title": "Modern Application Development II - Week 3",
    "section": "Application State",
    "text": "Application State\nApplication:\n\nSystem as seen by an individual user/session\nIncludes interactivity, session management\n\nExamples:\n\nShopping cart, user preferences, theme\nFollowed news items, recommendations\nDashboard displays"
  },
  {
    "objectID": "pages/w3.html#ui-state-ephemeral-state",
    "href": "pages/w3.html#ui-state-ephemeral-state",
    "title": "Modern Application Development II - Week 3",
    "section": "UI State (Ephemeral State)",
    "text": "UI State (Ephemeral State)\nUI:\n\nPart of application actually seen/intereacted with\nEphemeral - “lasting for a very short time” (term used by Flutter)\n\nExamples:\n\nLoading icons\nCurrently selected tab in multi-tab document/page"
  },
  {
    "objectID": "pages/w3.html#application-and-ui-management",
    "href": "pages/w3.html#application-and-ui-management",
    "title": "Modern Application Development II - Week 3",
    "section": "Application and UI management",
    "text": "Application and UI management\n\nHTTP is stateless\nHow to convey state between client and server?\n\nClient maintains state - sends requests to server for specific items\nServer maintains state - only specific requests allowed to client"
  },
  {
    "objectID": "pages/w3.html#example-tic-tac-toe",
    "href": "pages/w3.html#example-tic-tac-toe",
    "title": "Modern Application Development II - Week 3",
    "section": "Example: Tic-Tac-Toe",
    "text": "Example: Tic-Tac-Toe\n\nWhat to display on screen?\nWho determines the display?\nHow should user input be collected and processed?"
  },
  {
    "objectID": "pages/w1-2.html#review-of-mad-i",
    "href": "pages/w1-2.html#review-of-mad-i",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "",
    "text": "What is an app (at least in our context):\n\nAn application or program used for interacting with a computing system\nAllow the user to perform some tasks useful to them\n\nComponents:\n\nBackend: Store data, processing logic, relation between data elements etc.\nFrontend: User-facing views, abstract for machine interaction\nNaturally implies a client-server or request-response type of architecture\n\nWhy Web:\n\nClose to universal platform with clear client-server architecture\nLow barrier to entry - trivial to implement simple pages and interaction\nHigh degree of flexibility - possible to implement highly complex systems"
  },
  {
    "objectID": "pages/w1-2.html#review-of-the-web-application-development-model",
    "href": "pages/w1-2.html#review-of-the-web-application-development-model",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "",
    "text": "Presentation - HTML for semantic content, CSS for styling\nLogic - Backend logic highly flexible - we used Python with Flask\nApplication architecture:\n\nModel - View - Controller. Good compromise between understandability and flexibility\n\nSystem architecture:\n\nREST principles + sessions - how to build stateful applications over stateless protocols\nAPIs: separate data from view\nRESTful? APIs - useful for basic understanding, but not strict adherence to REST\n\nOthers:\n\nSecurity, Validation, Logins and RBAC, database and frontend choices etc."
  },
  {
    "objectID": "pages/w1-2.html#moving-forward",
    "href": "pages/w1-2.html#moving-forward",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "",
    "text": "Advanced Frontend Development\n\nExploring JavaScript and how to use it\nJavaScript, APIs, Markup - the JAMStack\nVueJS as a candidate frontend framework\n\nOther topics of interest\n\nAsynchronous messaging, Email\nMobile / Standalone apps, PWA/SPA\nPerformance measurement, benchmarking, optimization\nAlternatives to REST\netc."
  },
  {
    "objectID": "pages/w1-2.html#origins",
    "href": "pages/w1-2.html#origins",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Origins",
    "text": "Origins\n\nOriginally created in 1995 as scripting language for Netscape Navigator\nIntended as “glue” language\n\nStick modules from other languages together\nNot really meant for much code\n\nPrimarily meant to assist “applets” in Java - hence JavaScript\n\nTrademark issues, name changes, …\n\nIssues:\n\nSlow\nLimited capability"
  },
  {
    "objectID": "pages/w1-2.html#power",
    "href": "pages/w1-2.html#power",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Power",
    "text": "Power\n\nGlue was useful, but…\nThen Google Maps, Google Suggest etc. (~ 2005)\n\nPan around map, zoom in/out seamlessly - fluid user interface:\nLoad only what is needed!\n\nDescribed and Named Ajax - Garrett 2005\n\nAsynchronous Javascript and XML\n\nAllowed true “web applications” that behave like desktop applications\nEvolved considerably since then\n\nMuch more on this approach moving forward"
  },
  {
    "objectID": "pages/w1-2.html#standardization",
    "href": "pages/w1-2.html#standardization",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Standardization",
    "text": "Standardization\n\nMove beyond Netscape needed\nECMA (European Computer Manufacturers Association) - standard 262\nSubsequently called ECMAScript\n\nAvoid trademark issues with Java\n\nIn practice:\n\nLanguage standard called ECMAScript (versions)\nImplementation and use: JavaScript\n\nSignificant changes in ES6 - 2015\n\nYearly releases since then\n“Feature readiness” oriented approach"
  },
  {
    "objectID": "pages/w1-2.html#what-version-to-use",
    "href": "pages/w1-2.html#what-version-to-use",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "What version to use?",
    "text": "What version to use?\n\nES6 has most features of modern languages (modules, scoping, class etc.)\nSome older browsers may not support all of this\nPossible approaches:\n\nIgnore old browsers and ask user to upgrade\nPackage browser along with application - useful for limited cases, like VSCode (Electron apps)\nPolyfills: include libraries that emulate newer functionality for older browsers\nCompilers: BabelJS - convert new code to older compatible versions\n\nBackend\n\nNode.js, Deno: directly use JS as a scripting language like Python"
  },
  {
    "objectID": "pages/w1-2.html#implications-of-js-origins",
    "href": "pages/w1-2.html#implications-of-js-origins",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Implications of JS Origins",
    "text": "Implications of JS Origins\n\nEase of use given priority over performance (to start with)\nHighly tolerant of errors - fail silently\n\nDebugging difficult!\nStrict mode: “use strict”;\n\nAmbiguous syntax variants\n\nAutomatic semicolon insertion\nObject literals vs Code blocks {}\nFunction: statement or expression? Impacts parsing\n\nLimited IO support: errors “logged” to “console”\nClosely integrates with presentation layer: DOM APIs\nAsynchronous processing and the Event Loop - very powerful!"
  },
  {
    "objectID": "pages/w1-2.html#using-js",
    "href": "pages/w1-2.html#using-js",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Using JS",
    "text": "Using JS\n\nNot originally meant for direct scripting\n\nUsually not run from command line like Python for instance\n\nNeed HTML file to load the JS as a script\n\nRequires browser to serve the files\nLinks and script tags etc.\nMay not directly work when loaded as a file\n\nNodeJS allows execution from command line"
  },
  {
    "objectID": "pages/w1-2.html#dom",
    "href": "pages/w1-2.html#dom",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "DOM",
    "text": "DOM\n\nDocument Object Model\n\nStructure of the document shown on the browser\n\nDOM can be manipulated through JS APIs\nOne of the most powerful aspects of JavaScript\nInput: clicks, textboxes, mouseover, …\nOutput: text, colours/styles, drawing, …"
  },
  {
    "objectID": "pages/w1-2.html#references",
    "href": "pages/w1-2.html#references",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "References",
    "text": "References\n\nExploring JavaScript - exploringjs.com\n\ndetailed reference material, focused on language, not frontend or GUI - very up to date\n\nMozilla Developer Network\n\nseveral examples and compatibility hints\n\nLearn JavaScript Online - interactive tutorial\n\n. . .\nUtilities\n\nBabelJS - Compiler converts new JS to older compatible forms\nJS Console - interactive console to try out code\nRepl.it - complete application development"
  },
  {
    "objectID": "pages/w1-2.html#basic-frontend-usage",
    "href": "pages/w1-2.html#basic-frontend-usage",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Basic Frontend Usage",
    "text": "Basic Frontend Usage\n\nFrontend JavaScript: must be invoked from HTML page\n\nIn context of a “Document”\nwill not execute if loaded directly\n\nScripting language - no compilation step\nLoosely structured - no specific header, body etc."
  },
  {
    "objectID": "pages/w1-2.html#identifiers---the-words-of-the-language",
    "href": "pages/w1-2.html#identifiers---the-words-of-the-language",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Identifiers - the words of the language",
    "text": "Identifiers - the words of the language\n. . .\nReserved words:\n`await` `break` `case` `catch` `class` `const` `continue` `debugger` `default` `delete` `do` `else` `export` `extends` `finally` `for` `function` `if` `import` `in` `instanceof` `let` `new` `return` `static` `super` `switch` `this` `throw` `try` `typeof` `var` `void` `while` `with` `yield`\n. . .\nLiterals (values):\n`true` `false` `null`\n. . .\nOthers to avoid\n`enum` `implements` `package` `protected` `interface` `private` `public` `Infinity` `NaN` `undefined` `async`"
  },
  {
    "objectID": "pages/w1-2.html#statements-and-expressions",
    "href": "pages/w1-2.html#statements-and-expressions",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Statements and Expressions",
    "text": "Statements and Expressions\n\n\n\nStatements:\n\nPiece of code that can be executed\n    if ( ... ) {\n        // do something\n    }\nStandalone operation or side effects\n\n\n\n\nExpressions:\n\nPiece of code that can be executed to obtain a value to be returned\n    x = 10;\n    \"Hello world\"\nAnywhere you need a “value” - function argument, math expression etc."
  },
  {
    "objectID": "pages/w1-2.html#data-types",
    "href": "pages/w1-2.html#data-types",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Data Types",
    "text": "Data Types\n\nPrimitive data types: built into the language\n\nundefined, null, boolean, number, string (+bigint, symbol)\n\nObjects:\n\nCompound pieces of data\n\nFunctions:\n\nCan be handled like objects\nObjects can have functions: methods\nFunctions can have objects???"
  },
  {
    "objectID": "pages/w1-2.html#strings",
    "href": "pages/w1-2.html#strings",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Strings",
    "text": "Strings\n\nSource code is expected to be in Unicode\n\nmost engines expect UTF-16 encoding\n\nString functions like length can give surprising results on non-ASCII words\nCan have variables in other languages!\n\nBut best avoided… keep readability in mind"
  },
  {
    "objectID": "pages/w1-2.html#non-values",
    "href": "pages/w1-2.html#non-values",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Non-Values",
    "text": "Non-Values\n\nundefined\n\nUsually implies not initialized\nDefault unknown state\n\nnull\n\nExplicitly set to a non-value\n\n\n. . .\nVery similar and may be used interchangeably in most places - keep context in mind when using for clarity of code"
  },
  {
    "objectID": "pages/w1-2.html#operators-and-comparisons",
    "href": "pages/w1-2.html#operators-and-comparisons",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Operators and Comparisons",
    "text": "Operators and Comparisons\n\nAddition, subtraction etc.\n\nNumbers, Strings\n\nCoercion\n\nConvert to similar type where operation is defined\nCan lead to problems - needs care\n\nComparison:\n\nLoose equality: == tries to coerce\nStrict equality: === no coercion\n\nImportant for iteration, conditions"
  },
  {
    "objectID": "pages/w1-2.html#variables-and-scoping",
    "href": "pages/w1-2.html#variables-and-scoping",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Variables and Scoping",
    "text": "Variables and Scoping\n\nAny non-reserved identifier can be used as a “placeholder” or “variable”\nScope:\n\nShould the variable be visible everywhere in all scripts or only in a specific area?\nNamespaces and limiting scope\n\nlet, const are used for declaring variables\n\nUnlike Python, variables MUST be declared\nUnlike C, their type need NOT be declared\nvar was originally used for declaring variables, but has function level scope - avoid"
  },
  {
    "objectID": "pages/w1-2.html#let-and-const",
    "href": "pages/w1-2.html#let-and-const",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "let and const",
    "text": "let and const\n\nconst : declares an immutable object\n\nValue cannot be changed once assigned\nBut only within scope\n\nlet: variable that can be updated\n\nindex variable in for loops\ngeneral variables"
  },
  {
    "objectID": "pages/w1-2.html#control-flow",
    "href": "pages/w1-2.html#control-flow",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Control Flow",
    "text": "Control Flow\n\nConditional execution:\n\nif , else\n\nIteration\n\nfor , while\n\nChange in flow\n\nbreak, continue\n\nChoice\n\nswitch"
  },
  {
    "objectID": "pages/w1-2.html#functions",
    "href": "pages/w1-2.html#functions",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Functions",
    "text": "Functions\n\nReusable block of code\nCan take parameters or arguments and perform computation\nFunctions are themselves objects that can be assigned!"
  },
  {
    "objectID": "pages/w1-2.html#function-notation",
    "href": "pages/w1-2.html#function-notation",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Function Notation",
    "text": "Function Notation\n\n\nRegular declaration\n    function add(x, y)\n    {\n    return x + y;\n    }\n    // Statement\n\nNamed variable\n    let add =\n    function(x, y) {\n    return x + y;\n    }\n    // Expression\n\nArrow function\n    let add =\n    (x, y) =&gt; x + y;\n\n    // Expression"
  },
  {
    "objectID": "pages/w1-2.html#anonymous-functions-and-iifes",
    "href": "pages/w1-2.html#anonymous-functions-and-iifes",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Anonymous Functions and IIFEs",
    "text": "Anonymous Functions and IIFEs\n    let x = function() { return \"hello\"} // Anonymous bound\n\n    (function() { return \"hello\"})() // Declare and invoke\n. . .\nWhy? Older JS versions did not have good scoping rules. - Avoid IIFEs in modern code - poor readability"
  },
  {
    "objectID": "pages/w1-2.html#interaction",
    "href": "pages/w1-2.html#interaction",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "Interaction",
    "text": "Interaction\n\nconsole.log is very limited\n\nvariants for error logging etc.\nBut mostly useful only for limited form of debugging - not production use\n\nBut JS was designed for document manipulation!\nInputs from DOM: mouse, text, clicks\nOutputs to DOM: manipulation of text, colours etc."
  },
  {
    "objectID": "pages/w1-2.html",
    "href": "pages/w1-2.html",
    "title": "Modern Application Development - II — Week 1 Notes",
    "section": "",
    "text": "What is an app (at least in our context):\n\nAn application or program used for interacting with a computing system\nAllow the user to perform some tasks useful to them\n\nComponents:\n\nBackend: Store data, processing logic, relation between data elements etc.\nFrontend: User-facing views, abstract for machine interaction\nNaturally implies a client-server or request-response type of architecture\n\nWhy Web:\n\nClose to universal platform with clear client-server architecture\nLow barrier to entry - trivial to implement simple pages and interaction\nHigh degree of flexibility - possible to implement highly complex systems\n\n\n\n\n\n\nPresentation - HTML for semantic content, CSS for styling\nLogic - Backend logic highly flexible - we used Python with Flask\nApplication architecture:\n\nModel - View - Controller. Good compromise between understandability and flexibility\n\nSystem architecture:\n\nREST principles + sessions - how to build stateful applications over stateless protocols\nAPIs: separate data from view\nRESTful? APIs - useful for basic understanding, but not strict adherence to REST\n\nOthers:\n\nSecurity, Validation, Logins and RBAC, database and frontend choices etc.\n\n\n\n\n\n\nAdvanced Frontend Development\n\nExploring JavaScript and how to use it\nJavaScript, APIs, Markup - the JAMStack\nVueJS as a candidate frontend framework\n\nOther topics of interest\n\nAsynchronous messaging, Email\nMobile / Standalone apps, PWA/SPA\nPerformance measurement, benchmarking, optimization\nAlternatives to REST\netc."
  },
  {
    "objectID": "pages/w1.html",
    "href": "pages/w1.html",
    "title": "Modern Application Development - II — Week 1",
    "section": "",
    "text": "Note\n\n\n\nClick here to view in presentation mode: Modern Application Development II - Week 1"
  },
  {
    "objectID": "pages/w1-slides.html",
    "href": "pages/w1-slides.html",
    "title": "Modern Application Development - II — Week 1",
    "section": "",
    "text": "What is an app (at least in our context):\n\nAn application or program used for interacting with a computing system\nAllow the user to perform some tasks useful to them\n\nComponents:\n\nBackend: Store data, processing logic, relation between data elements etc.\nFrontend: User-facing views, abstract for machine interaction\nNaturally implies a client-server or request-response type of architecture\n\nWhy Web:\n\nClose to universal platform with clear client-server architecture\nLow barrier to entry - trivial to implement simple pages and interaction\nHigh degree of flexibility - possible to implement highly complex systems\n\n\n\n\n\n\nPresentation - HTML for semantic content, CSS for styling\nLogic - Backend logic highly flexible - we used Python with Flask\nApplication architecture:\n\nModel - View - Controller. Good compromise between understandability and flexibility\n\nSystem architecture:\n\nREST principles + sessions - how to build stateful applications over stateless protocols\nAPIs: separate data from view\nRESTful? APIs - useful for basic understanding, but not strict adherence to REST\n\nOthers:\n\nSecurity, Validation, Logins and RBAC, database and frontend choices etc.\n\n\n\n\n\n\nAdvanced Frontend Development\n\nExploring JavaScript and how to use it\nJavaScript, APIs, Markup - the JAMStack\nVueJS as a candidate frontend framework\n\nOther topics of interest\n\nAsynchronous messaging, Email\nMobile / Standalone apps, PWA/SPA\nPerformance measurement, benchmarking, optimization\nAlternatives to REST\netc."
  },
  {
    "objectID": "pages/w1-slides.html#review-of-mad-i",
    "href": "pages/w1-slides.html#review-of-mad-i",
    "title": "Modern Application Development - II — Week 1",
    "section": "Review of MAD-I",
    "text": "Review of MAD-I\n\nWhat is an app (at least in our context):\n\nAn application or program used for interacting with a computing system\nAllow the user to perform some tasks useful to them\n\nComponents:\n\nBackend: Store data, processing logic, relation between data elements etc.\nFrontend: User-facing views, abstract for machine interaction\nNaturally implies a client-server or request-response type of architecture\n\nWhy Web:\n\nClose to universal platform with clear client-server architecture\nLow barrier to entry - trivial to implement simple pages and interaction\nHigh degree of flexibility - possible to implement highly complex systems"
  },
  {
    "objectID": "pages/w1-slides.html#review-of-the-web-application-development-model",
    "href": "pages/w1-slides.html#review-of-the-web-application-development-model",
    "title": "Modern Application Development - II — Week 1",
    "section": "Review of the Web Application Development Model",
    "text": "Review of the Web Application Development Model\n\nPresentation - HTML for semantic content, CSS for styling\nLogic - Backend logic highly flexible - we used Python with Flask\nApplication architecture:\n\nModel - View - Controller. Good compromise between understandability and flexibility\n\nSystem architecture:\n\nREST principles + sessions - how to build stateful applications over stateless protocols\nAPIs: separate data from view\nRESTful? APIs - useful for basic understanding, but not strict adherence to REST\n\nOthers:\n\nSecurity, Validation, Logins and RBAC, database and frontend choices etc."
  },
  {
    "objectID": "pages/w1-slides.html#moving-forward",
    "href": "pages/w1-slides.html#moving-forward",
    "title": "Modern Application Development - II — Week 1",
    "section": "Moving Forward",
    "text": "Moving Forward\n\nAdvanced Frontend Development\n\nExploring JavaScript and how to use it\nJavaScript, APIs, Markup - the JAMStack\nVueJS as a candidate frontend framework\n\nOther topics of interest\n\nAsynchronous messaging, Email\nMobile / Standalone apps, PWA/SPA\nPerformance measurement, benchmarking, optimization\nAlternatives to REST\netc."
  },
  {
    "objectID": "pages/w1-slides.html#origins",
    "href": "pages/w1-slides.html#origins",
    "title": "Modern Application Development - II — Week 1",
    "section": "Origins",
    "text": "Origins\n\nOriginally created in 1995 as scripting language for Netscape Navigator\nIntended as “glue” language\n\nStick modules from other languages together\nNot really meant for much code\n\nPrimarily meant to assist “applets” in Java - hence JavaScript\n\nTrademark issues, name changes, …\n\nIssues:\n\nSlow\nLimited capability"
  },
  {
    "objectID": "pages/w1-slides.html#power",
    "href": "pages/w1-slides.html#power",
    "title": "Modern Application Development - II — Week 1",
    "section": "Power",
    "text": "Power\n\nGlue was useful, but…\nThen Google Maps, Google Suggest etc. (~ 2005)\n\nPan around map, zoom in/out seamlessly - fluid user interface:\nLoad only what is needed!\n\nDescribed and Named Ajax - Garrett 2005\n\nAsynchronous Javascript and XML\n\nAllowed true “web applications” that behave like desktop applications\nEvolved considerably since then\n\nMuch more on this approach moving forward"
  },
  {
    "objectID": "pages/w1-slides.html#standardization",
    "href": "pages/w1-slides.html#standardization",
    "title": "Modern Application Development - II — Week 1",
    "section": "Standardization",
    "text": "Standardization\n\nMove beyond Netscape needed\nECMA (European Computer Manufacturers Association) - standard 262\nSubsequently called ECMAScript\n\nAvoid trademark issues with Java\n\nIn practice:\n\nLanguage standard called ECMAScript (versions)\nImplementation and use: JavaScript\n\nSignificant changes in ES6 - 2015\n\nYearly releases since then\n“Feature readiness” oriented approach"
  },
  {
    "objectID": "pages/w1-slides.html#what-version-to-use",
    "href": "pages/w1-slides.html#what-version-to-use",
    "title": "Modern Application Development - II — Week 1",
    "section": "What version to use?",
    "text": "What version to use?\n\nES6 has most features of modern languages (modules, scoping, class etc.)\nSome older browsers may not support all of this\nPossible approaches:\n\nIgnore old browsers and ask user to upgrade\nPackage browser along with application - useful for limited cases, like VSCode (Electron apps)\nPolyfills: include libraries that emulate newer functionality for older browsers\nCompilers: BabelJS - convert new code to older compatible versions\n\nBackend\n\nNode.js, Deno: directly use JS as a scripting language like Python"
  },
  {
    "objectID": "pages/w1-slides.html#implications-of-js-origins",
    "href": "pages/w1-slides.html#implications-of-js-origins",
    "title": "Modern Application Development - II — Week 1",
    "section": "Implications of JS Origins",
    "text": "Implications of JS Origins\n\nEase of use given priority over performance (to start with)\nHighly tolerant of errors - fail silently\n\nDebugging difficult!\nStrict mode: “use strict”;\n\nAmbiguous syntax variants\n\nAutomatic semicolon insertion\nObject literals vs Code blocks {}\nFunction: statement or expression? Impacts parsing\n\nLimited IO support: errors “logged” to “console”\nClosely integrates with presentation layer: DOM APIs\nAsynchronous processing and the Event Loop - very powerful!"
  },
  {
    "objectID": "pages/w1-slides.html#using-js",
    "href": "pages/w1-slides.html#using-js",
    "title": "Modern Application Development - II — Week 1",
    "section": "Using JS",
    "text": "Using JS\n\nNot originally meant for direct scripting\n\nUsually not run from command line like Python for instance\n\nNeed HTML file to load the JS as a script\n\nRequires browser to serve the files\nLinks and script tags etc.\nMay not directly work when loaded as a file\n\nNodeJS allows execution from command line"
  },
  {
    "objectID": "pages/w1-slides.html#dom",
    "href": "pages/w1-slides.html#dom",
    "title": "Modern Application Development - II — Week 1",
    "section": "DOM",
    "text": "DOM\n\nDocument Object Model\n\nStructure of the document shown on the browser\n\nDOM can be manipulated through JS APIs\nOne of the most powerful aspects of JavaScript\nInput: clicks, textboxes, mouseover, …\nOutput: text, colours/styles, drawing, …"
  },
  {
    "objectID": "pages/w1-slides.html#references",
    "href": "pages/w1-slides.html#references",
    "title": "Modern Application Development - II — Week 1",
    "section": "References",
    "text": "References\n\nExploring JavaScript - exploringjs.com\n\ndetailed reference material, focused on language, not frontend or GUI - very up to date\n\nMozilla Developer Network\n\nseveral examples and compatibility hints\n\nLearn JavaScript Online - interactive tutorial\n\n\nUtilities\n\nBabelJS - Compiler converts new JS to older compatible forms\nJS Console - interactive console to try out code\nRepl.it - complete application development"
  },
  {
    "objectID": "pages/w1-slides.html#basic-frontend-usage",
    "href": "pages/w1-slides.html#basic-frontend-usage",
    "title": "Modern Application Development - II — Week 1",
    "section": "Basic Frontend Usage",
    "text": "Basic Frontend Usage\n\nFrontend JavaScript: must be invoked from HTML page\n\nIn context of a “Document”\nwill not execute if loaded directly\n\nScripting language - no compilation step\nLoosely structured - no specific header, body etc."
  },
  {
    "objectID": "pages/w1-slides.html#identifiers---the-words-of-the-language",
    "href": "pages/w1-slides.html#identifiers---the-words-of-the-language",
    "title": "Modern Application Development - II — Week 1",
    "section": "Identifiers - the words of the language",
    "text": "Identifiers - the words of the language\n\nReserved words:\n`await` `break` `case` `catch` `class` `const` `continue` `debugger` `default` `delete` `do` `else` `export` `extends` `finally` `for` `function` `if` `import` `in` `instanceof` `let` `new` `return` `static` `super` `switch` `this` `throw` `try` `typeof` `var` `void` `while` `with` `yield`\n\n\nLiterals (values):\n`true` `false` `null`\n\n\nOthers to avoid\n`enum` `implements` `package` `protected` `interface` `private` `public` `Infinity` `NaN` `undefined` `async`"
  },
  {
    "objectID": "pages/w1-slides.html#statements-and-expressions",
    "href": "pages/w1-slides.html#statements-and-expressions",
    "title": "Modern Application Development - II — Week 1",
    "section": "Statements and Expressions",
    "text": "Statements and Expressions\n\n\n\nStatements:\n\nPiece of code that can be executed\n    if ( ... ) {\n        // do something\n    }\nStandalone operation or side effects\n\n\n\n\nExpressions:\n\nPiece of code that can be executed to obtain a value to be returned\n    x = 10;\n    \"Hello world\"\nAnywhere you need a “value” - function argument, math expression etc."
  },
  {
    "objectID": "pages/w1-slides.html#data-types",
    "href": "pages/w1-slides.html#data-types",
    "title": "Modern Application Development - II — Week 1",
    "section": "Data Types",
    "text": "Data Types\n\nPrimitive data types: built into the language\n\nundefined, null, boolean, number, string (+bigint, symbol)\n\nObjects:\n\nCompound pieces of data\n\nFunctions:\n\nCan be handled like objects\nObjects can have functions: methods\nFunctions can have objects???"
  },
  {
    "objectID": "pages/w1-slides.html#strings",
    "href": "pages/w1-slides.html#strings",
    "title": "Modern Application Development - II — Week 1",
    "section": "Strings",
    "text": "Strings\n\nSource code is expected to be in Unicode\n\nmost engines expect UTF-16 encoding\n\nString functions like length can give surprising results on non-ASCII words\nCan have variables in other languages!\n\nBut best avoided… keep readability in mind"
  },
  {
    "objectID": "pages/w1-slides.html#non-values",
    "href": "pages/w1-slides.html#non-values",
    "title": "Modern Application Development - II — Week 1",
    "section": "Non-Values",
    "text": "Non-Values\n\nundefined\n\nUsually implies not initialized\nDefault unknown state\n\nnull\n\nExplicitly set to a non-value\n\n\n\nVery similar and may be used interchangeably in most places - keep context in mind when using for clarity of code"
  },
  {
    "objectID": "pages/w1-slides.html#operators-and-comparisons",
    "href": "pages/w1-slides.html#operators-and-comparisons",
    "title": "Modern Application Development - II — Week 1",
    "section": "Operators and Comparisons",
    "text": "Operators and Comparisons\n\nAddition, subtraction etc.\n\nNumbers, Strings\n\nCoercion\n\nConvert to similar type where operation is defined\nCan lead to problems - needs care\n\nComparison:\n\nLoose equality: == tries to coerce\nStrict equality: === no coercion\n\nImportant for iteration, conditions"
  },
  {
    "objectID": "pages/w1-slides.html#variables-and-scoping",
    "href": "pages/w1-slides.html#variables-and-scoping",
    "title": "Modern Application Development - II — Week 1",
    "section": "Variables and Scoping",
    "text": "Variables and Scoping\n\nAny non-reserved identifier can be used as a “placeholder” or “variable”\nScope:\n\nShould the variable be visible everywhere in all scripts or only in a specific area?\nNamespaces and limiting scope\n\nlet, const are used for declaring variables\n\nUnlike Python, variables MUST be declared\nUnlike C, their type need NOT be declared\nvar was originally used for declaring variables, but has function level scope - avoid"
  },
  {
    "objectID": "pages/w1-slides.html#let-and-const",
    "href": "pages/w1-slides.html#let-and-const",
    "title": "Modern Application Development - II — Week 1",
    "section": "let and const",
    "text": "let and const\n\nconst : declares an immutable object\n\nValue cannot be changed once assigned\nBut only within scope\n\nlet: variable that can be updated\n\nindex variable in for loops\ngeneral variables"
  },
  {
    "objectID": "pages/w1-slides.html#control-flow",
    "href": "pages/w1-slides.html#control-flow",
    "title": "Modern Application Development - II — Week 1",
    "section": "Control Flow",
    "text": "Control Flow\n\nConditional execution:\n\nif , else\n\nIteration\n\nfor , while\n\nChange in flow\n\nbreak, continue\n\nChoice\n\nswitch"
  },
  {
    "objectID": "pages/w1-slides.html#functions",
    "href": "pages/w1-slides.html#functions",
    "title": "Modern Application Development - II — Week 1",
    "section": "Functions",
    "text": "Functions\n\nReusable block of code\nCan take parameters or arguments and perform computation\nFunctions are themselves objects that can be assigned!"
  },
  {
    "objectID": "pages/w1-slides.html#function-notation",
    "href": "pages/w1-slides.html#function-notation",
    "title": "Modern Application Development - II — Week 1",
    "section": "Function Notation",
    "text": "Function Notation\n\n\nRegular declaration\n    function add(x, y)\n    {\n    return x + y;\n    }\n    // Statement\n\nNamed variable\n    let add =\n    function(x, y) {\n    return x + y;\n    }\n    // Expression\n\nArrow function\n    let add =\n    (x, y) =&gt; x + y;\n\n    // Expression"
  },
  {
    "objectID": "pages/w1-slides.html#anonymous-functions-and-iifes",
    "href": "pages/w1-slides.html#anonymous-functions-and-iifes",
    "title": "Modern Application Development - II — Week 1",
    "section": "Anonymous Functions and IIFEs",
    "text": "Anonymous Functions and IIFEs\n    let x = function() { return \"hello\"} // Anonymous bound\n\n    (function() { return \"hello\"})() // Declare and invoke\n\nWhy? Older JS versions did not have good scoping rules. - Avoid IIFEs in modern code - poor readability"
  },
  {
    "objectID": "pages/w1-slides.html#interaction",
    "href": "pages/w1-slides.html#interaction",
    "title": "Modern Application Development - II — Week 1",
    "section": "Interaction",
    "text": "Interaction\n\nconsole.log is very limited\n\nvariants for error logging etc.\nBut mostly useful only for limited form of debugging - not production use\n\nBut JS was designed for document manipulation!\nInputs from DOM: mouse, text, clicks\nOutputs to DOM: manipulation of text, colours etc.\n\n\n\n\nComplete notes"
  },
  {
    "objectID": "pages/w2-slides.html#basic-arrays",
    "href": "pages/w2-slides.html#basic-arrays",
    "title": "Modern Application Development II - Week 2",
    "section": "Basic Arrays",
    "text": "Basic Arrays\n\nCollection of objects of any type\n\nCan even be a mix of types (numbers, strings, objects, functions, etc.)\n\nElement access\nLength property\nHoles\nIteration"
  },
  {
    "objectID": "pages/w2-slides.html#iteration",
    "href": "pages/w2-slides.html#iteration",
    "title": "Modern Application Development II - Week 2",
    "section": "Iteration",
    "text": "Iteration\n\nGo over all elements in a collection\nConcepts:\n\nIterable: an object whose contents can be accessed sequentially\nIterator: pointer to the next element in the collection\n\nIterable objects:\n\nArrays\nStrings\nMaps\nSets\nBrowser DOM - tree structure\n\nObjects: Object.keys(obj), Object.values(obj), Object.entries(obj) - helper functions"
  },
  {
    "objectID": "pages/w2-slides.html#iterations-and-transformations",
    "href": "pages/w2-slides.html#iterations-and-transformations",
    "title": "Modern Application Development II - Week 2",
    "section": "Iterations and Transformations",
    "text": "Iterations and Transformations\n\nFunctions that take functions as arguments/input\nmap, filter, find\n\nApply a callback function over each element in the collection\n\nElements of functional programming: create a transformation chain\n\n\nCallback: important concept - a function that is passed as an argument to another function, to be called back for some purpose"
  },
  {
    "objectID": "pages/w2-slides.html#other-collections",
    "href": "pages/w2-slides.html#other-collections",
    "title": "Modern Application Development II - Week 2",
    "section": "Other Collections",
    "text": "Other Collections\n\nMaps: proper dictionary-like objects\nWeakMaps\nSets"
  },
  {
    "objectID": "pages/w2-slides.html#destructuring",
    "href": "pages/w2-slides.html#destructuring",
    "title": "Modern Application Development II - Week 2",
    "section": "Destructuring",
    "text": "Destructuring\n\nSimple syntax to split an array into multiple variables\nEasier to pass and collect arguments etc.\nAlso works with objects"
  },
  {
    "objectID": "pages/w2-slides.html#generators",
    "href": "pages/w2-slides.html#generators",
    "title": "Modern Application Development II - Week 2",
    "section": "Generators",
    "text": "Generators\n\nFunctions that yield values one at a time\nComputed iterables\nDynamically generate iterators"
  },
  {
    "objectID": "pages/w2-slides.html#modules",
    "href": "pages/w2-slides.html#modules",
    "title": "Modern Application Development II - Week 2",
    "section": "Modules",
    "text": "Modules\n\nCollect related functions, objects, values together\n“export” values for use by other scripts\n“import” values from other scripts, packages"
  },
  {
    "objectID": "pages/w2-slides.html#ways-of-implementing",
    "href": "pages/w2-slides.html#ways-of-implementing",
    "title": "Modern Application Development II - Week 2",
    "section": "Ways of implementing",
    "text": "Ways of implementing\n\nscript - directly include script inside browser\nCommonJS - introduced for server-side modules\n\nsynchronous load: server blocks till module is loaded\n\nAMD - asynchronous module definition\n\nused for browser-side modules\n\n\n\nECMAScript 6 and above:\n\nES6 modules\n\nBoth servers and browsers\nAsynchronous loading"
  },
  {
    "objectID": "pages/w2-slides.html#npm",
    "href": "pages/w2-slides.html#npm",
    "title": "Modern Application Development II - Week 2",
    "section": "npm",
    "text": "npm\n\nNode Package Manager\nNode:\n\ncommand line interface for JS\nMainly used for backend code, can also be used for testing\n\nnpm can also be used to package modules for frontend\n\n“Bundle” managers - webpack, rollup, etc."
  },
  {
    "objectID": "pages/w2-slides.html#objects",
    "href": "pages/w2-slides.html#objects",
    "title": "Modern Application Development II - Week 2",
    "section": "Objects",
    "text": "Objects\n\nEverything in JavaScript is an object\nObject literals\n\nAssign values to named parameters in an object\n\nObject methods\n\nAssign functions that can be called on the object\n\nSpecial variable this - refers to the object itself\nFunction methods\n\ncall(), apply(), bind()\n\nObject.keys(), values(), entries()\n\nuse as dictionary\niterators"
  },
  {
    "objectID": "pages/w2-slides.html#prototype-based-inheritance",
    "href": "pages/w2-slides.html#prototype-based-inheritance",
    "title": "Modern Application Development II - Week 2",
    "section": "Prototype based inheritance",
    "text": "Prototype based inheritance\n\nObjects can have a “prototype”\nAutomatically inherit properties and methods of parent object\nSingle inheritance track"
  },
  {
    "objectID": "pages/w2-slides.html#class",
    "href": "pages/w2-slides.html#class",
    "title": "Modern Application Development II - Week 2",
    "section": "Class",
    "text": "Class\n\nBetter syntax - still prototype based inheritance\nconstructor must explicitly call super()\nMultiple inheritance of Mixins"
  },
  {
    "objectID": "pages/w2-slides.html#function-calls",
    "href": "pages/w2-slides.html#function-calls",
    "title": "Modern Application Development II - Week 2",
    "section": "Function calls",
    "text": "Function calls\n\n\n\nFunction is like a “branch”\n\nbut must save present state so we can return\n\nCall stack:\n\nKeep track of chain of functions called up to now\nPop back up out of the stack\n\n\n\n\nmain() on stack - current - calls f()\nf() goes on stack - calls g()\ng() goes on stack - calls h()\nh() goes on stack - executes\nreturn from h -&gt; pop into g\nreturn from g -&gt; pop into f\nreturn from f -&gt; pop into main"
  },
  {
    "objectID": "pages/w2-slides.html#call-stack",
    "href": "pages/w2-slides.html#call-stack",
    "title": "Modern Application Development II - Week 2",
    "section": "Call Stack",
    "text": "Call Stack\nExplanatory video\nVisualize the call stack"
  },
  {
    "objectID": "pages/w2-slides.html#event-loop-and-task-queue",
    "href": "pages/w2-slides.html#event-loop-and-task-queue",
    "title": "Modern Application Development II - Week 2",
    "section": "Event Loop and Task Queue",
    "text": "Event Loop and Task Queue\n\nTask Queue: store next task to be executed\n\nTasks are pushed into the queue by events (clicks, input, network etc.)\n\nEvent loop:\n\nWait for call stack to be empty\nPop next task from queue and push onto stack, start executing\n\nRun-to-completion\n\nGuarantee from JavaScript runtime\nEach task will run to completion before next task is picked up"
  },
  {
    "objectID": "pages/w2-slides.html#blocking-the-browser",
    "href": "pages/w2-slides.html#blocking-the-browser",
    "title": "Modern Application Development II - Week 2",
    "section": "Blocking the browser",
    "text": "Blocking the browser\nhttps://exploringjs.com/impatient-js/ch_async-js.html#how-to-avoid-blocking-the-javascript-process"
  },
  {
    "objectID": "pages/w2-slides.html#why-callbacks",
    "href": "pages/w2-slides.html#why-callbacks",
    "title": "Modern Application Development II - Week 2",
    "section": "Why callbacks?",
    "text": "Why callbacks?\n\nLong running code\n\nWill block execution till it finishes\n\nPush long running code into a separate “thread” or “task”\n\nLet main code proceed\nCall back when task is done"
  },
  {
    "objectID": "pages/w2-slides.html#example-reading-files---synchronous",
    "href": "pages/w2-slides.html#example-reading-files---synchronous",
    "title": "Modern Application Development II - Week 2",
    "section": "Example: reading files - synchronous",
    "text": "Example: reading files - synchronous\n\nconst fs = require('fs');\n\ntry {\n    const data = fs.readFileSync('file.txt', 'utf8');\n    console.log(data);\n} catch (err) {\n    console.error(err);\n}"
  },
  {
    "objectID": "pages/w2-slides.html#example-reading-files---asynchronous",
    "href": "pages/w2-slides.html#example-reading-files---asynchronous",
    "title": "Modern Application Development II - Week 2",
    "section": "Example: reading files - asynchronous",
    "text": "Example: reading files - asynchronous\n\nconst fs = require('fs');\n\nfs.readFile('file.txt', 'utf8', (err, data) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(data);\n});"
  },
  {
    "objectID": "pages/w2-slides.html#asynchronous-code",
    "href": "pages/w2-slides.html#asynchronous-code",
    "title": "Modern Application Development II - Week 2",
    "section": "Asynchronous Code",
    "text": "Asynchronous Code\n\nVery powerful - allows JS to have high performance even though it is single-threaded\nCan be difficult to comprehend\n\nFocus on using async libraries and functions before writing your own\n\nPromises, async function calls, etc.\n\nImportant and useful concepts\nDeferred for now"
  },
  {
    "objectID": "pages/w2-slides.html#json-1",
    "href": "pages/w2-slides.html#json-1",
    "title": "Modern Application Development II - Week 2",
    "section": "JSON",
    "text": "JSON\n\nObject Notation - for serialization, communication\nNotation is frozen\n\nMeans even problem cases will remain (trailing “.” could ve useful but will not be used)\n\nUsage through JSON API"
  },
  {
    "objectID": "pages/w2-slides.html#json-api",
    "href": "pages/w2-slides.html#json-api",
    "title": "Modern Application Development II - Week 2",
    "section": "JSON API",
    "text": "JSON API\n\nGlobal namespace object JSON\nMain methods:\n\nJSON.stringify()\nJSON.parse()\n\n\n\n\n\nComplete notes"
  },
  {
    "objectID": "pages/w2.html",
    "href": "pages/w2.html",
    "title": "Modern Application Development II - Week 2",
    "section": "",
    "text": "Note\n\n\n\nClick here to view in presentation mode: Modern Application Development II - Week 2"
  },
  {
    "objectID": "pages/w3-slides.html#what-is-the-frontend",
    "href": "pages/w3-slides.html#what-is-the-frontend",
    "title": "Modern Application Development II - Week 3",
    "section": "What is the frontend?",
    "text": "What is the frontend?\n\nUser-facing part of the application\n\nUser Interface (UI) and User Experience (UX)\n\nRequirements\n\nAvoid complex logic - application logic should be in the backend\nNo data storage\nWork with stateless nature of HTTP\n\nDesirable\n\nAesthetically pleasing\nResponsive - no lag/latency\nAdaptive - different screens"
  },
  {
    "objectID": "pages/w3-slides.html#programming-styles",
    "href": "pages/w3-slides.html#programming-styles",
    "title": "Modern Application Development II - Week 3",
    "section": "Programming Styles",
    "text": "Programming Styles\n\nImperative: sequence of actions to achieve final result\n\nDraw boxes for navigation, main text, fill in text, wait for clicks etc.\nFunctions for each step, composition of functions\n\nDeclarative: specify desired result\n\nCompiler/Interpreter knows how to achieve result\nFunction integration automated"
  },
  {
    "objectID": "pages/w3-slides.html#state",
    "href": "pages/w3-slides.html#state",
    "title": "Modern Application Development II - Week 3",
    "section": "State?",
    "text": "State?\n\nInternal details of system: memory\nReproducibility\n\nGiven a “system state”, the system should always respond the same way to input\n\nComplexity\n\nAny non-trivial application needs internal state"
  },
  {
    "objectID": "pages/w3-slides.html#system-state",
    "href": "pages/w3-slides.html#system-state",
    "title": "Modern Application Development II - Week 3",
    "section": "System State",
    "text": "System State\n\nComplete database of amazon.in, flipkart.com\n\nStocks of available items, prices, logged in/register users, etc.\n\nAll news articles ever published on toi.com, thehindu.com, bbc.com\nAll students, courses, marks, certificates, etc. for NPTEL\n\n\nTypically huge, but comprehensive\n\nCompletely independent of the user interface/frontend!"
  },
  {
    "objectID": "pages/w3-slides.html#application-state",
    "href": "pages/w3-slides.html#application-state",
    "title": "Modern Application Development II - Week 3",
    "section": "Application State",
    "text": "Application State\n\nApplication:\n\nSystem as seen by an individual user/session\nIncludes interactivity, session management\n\n\n\nExamples:\n\nShopping cart, user preferences, theme\nFollowed news items, recommendations\nDashboard displays"
  },
  {
    "objectID": "pages/w3-slides.html#ui-state-ephemeral-state",
    "href": "pages/w3-slides.html#ui-state-ephemeral-state",
    "title": "Modern Application Development II - Week 3",
    "section": "UI State (Ephemeral State)",
    "text": "UI State (Ephemeral State)\n\nUI:\n\nPart of application actually seen/intereacted with\nEphemeral - “lasting for a very short time” (term used by Flutter)\n\n\n\nExamples:\n\nLoading icons\nCurrently selected tab in multi-tab document/page"
  },
  {
    "objectID": "pages/w3-slides.html#application-and-ui-management",
    "href": "pages/w3-slides.html#application-and-ui-management",
    "title": "Modern Application Development II - Week 3",
    "section": "Application and UI management",
    "text": "Application and UI management\n\nHTTP is stateless\nHow to convey state between client and server?\n\nClient maintains state - sends requests to server for specific items\nServer maintains state - only specific requests allowed to client"
  },
  {
    "objectID": "pages/w3-slides.html#example-tic-tac-toe",
    "href": "pages/w3-slides.html#example-tic-tac-toe",
    "title": "Modern Application Development II - Week 3",
    "section": "Example: Tic-Tac-Toe",
    "text": "Example: Tic-Tac-Toe\n\nWhat to display on screen?\nWho determines the display?\nHow should user input be collected and processed?\n\n\n\n\nComplete notes"
  },
  {
    "objectID": "pages/w3.html",
    "href": "pages/w3.html",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "Note\n\n\n\nClick here to view in presentation mode: Modern Application Development II - Week 3"
  },
  {
    "objectID": "pages/w2-slides.html",
    "href": "pages/w2-slides.html",
    "title": "Modern Application Development II - Week 2",
    "section": "",
    "text": "Collection of objects of any type\n\nCan even be a mix of types (numbers, strings, objects, functions, etc.)\n\nElement access\nLength property\nHoles\nIteration\n\n\n\n\n\nGo over all elements in a collection\nConcepts:\n\nIterable: an object whose contents can be accessed sequentially\nIterator: pointer to the next element in the collection\n\nIterable objects:\n\nArrays\nStrings\nMaps\nSets\nBrowser DOM - tree structure\n\nObjects: Object.keys(obj), Object.values(obj), Object.entries(obj) - helper functions\n\n\n\n\n\nFunctions that take functions as arguments/input\nmap, filter, find\n\nApply a callback function over each element in the collection\n\nElements of functional programming: create a transformation chain\n\n. . .\nCallback: important concept - a function that is passed as an argument to another function, to be called back for some purpose\n\n\n\n\nMaps: proper dictionary-like objects\nWeakMaps\nSets\n\n\n\n\n\nSimple syntax to split an array into multiple variables\nEasier to pass and collect arguments etc.\nAlso works with objects\n\n\n\n\n\nFunctions that yield values one at a time\nComputed iterables\nDynamically generate iterators"
  },
  {
    "objectID": "pages/w3-slides.html",
    "href": "pages/w3-slides.html",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "User-facing part of the application\n\nUser Interface (UI) and User Experience (UX)\n\nRequirements\n\nAvoid complex logic - application logic should be in the backend\nNo data storage\nWork with stateless nature of HTTP\n\nDesirable\n\nAesthetically pleasing\nResponsive - no lag/latency\nAdaptive - different screens\n\n\n\n\n\n\nImperative: sequence of actions to achieve final result\n\nDraw boxes for navigation, main text, fill in text, wait for clicks etc.\nFunctions for each step, composition of functions\n\nDeclarative: specify desired result\n\nCompiler/Interpreter knows how to achieve result\nFunction integration automated\n\n\n\n\n\n\nCredit: Flutter documentation “Start thinking declaratively”\n\n\n\n\n\n\nInternal details of system: memory\nReproducibility\n\nGiven a “system state”, the system should always respond the same way to input\n\nComplexity\n\nAny non-trivial application needs internal state\n\n\n\n\n\n\nComplete database of amazon.in, flipkart.com\n\nStocks of available items, prices, logged in/register users, etc.\n\nAll news articles ever published on toi.com, thehindu.com, bbc.com\nAll students, courses, marks, certificates, etc. for NPTEL\n\n. . .\nTypically huge, but comprehensive\n\nCompletely independent of the user interface/frontend!\n\n\n\n\n. . .\nApplication:\n\nSystem as seen by an individual user/session\nIncludes interactivity, session management\n\n. . .\nExamples:\n\nShopping cart, user preferences, theme\nFollowed news items, recommendations\nDashboard displays\n\n\n\n\n. . .\nUI:\n\nPart of application actually seen/intereacted with\nEphemeral - “lasting for a very short time” (term used by Flutter)\n\n. . .\nExamples:\n\nLoading icons\nCurrently selected tab in multi-tab document/page\n\n\n\n\n\nHTTP is stateless\nHow to convey state between client and server?\n\nClient maintains state - sends requests to server for specific items\nServer maintains state - only specific requests allowed to client\n\n\n\n\n\n\nWhat to display on screen?\nWho determines the display?\nHow should user input be collected and processed?"
  },
  {
    "objectID": "pages/w2-slides.html#json",
    "href": "pages/w2-slides.html#json",
    "title": "Modern Application Development II - Week 2",
    "section": "JSON",
    "text": "JSON\n\nObject Notation - for serialization, communication\nNotation is frozen\n\nMeans even problem cases will remain (trailing “.” could ve useful but will not be used)\n\nUsage through JSON API"
  },
  {
    "objectID": "pages/w2.html#json",
    "href": "pages/w2.html#json",
    "title": "Modern Application Development II - Week 2",
    "section": "JSON",
    "text": "JSON\n\nObject Notation - for serialization, communication\nNotation is frozen\n\nMeans even problem cases will remain (trailing “.” could ve useful but will not be used)\n\nUsage through JSON API"
  }
]